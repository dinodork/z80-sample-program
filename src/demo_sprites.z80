;
; Title:        Sprite Demo
; Author:       Dean Belfield
; Created:	20/08/2011
; Last updated: 20/08/2011
;
; Requires:	keyboard, output, screen_buffer, sound, sprite, math
;
; Modinfo:
;

			DEVICE ZXSPECTRUM48			; sjasmplus directive for SAVESNA at end


			include "../lib/keyboard.z80"
			include "../lib/output.z80"
			include "../lib/screen_buffer.z80"
			include "../lib/sound.z80"
			include "../lib/sprite.z80"
			include "../lib/math.z80"
			; to do: Stop hardcoding this
			include "../build/graphics/bubble2x2.asm"
			include "../build/graphics/player.asm"

Initialise_Sprites:
	LD IX, Sprite_Data_Block_Array

; Initialize player sprite
	LD (IX + Sprite_Frameno), Player_Center
	LD (IX + Sprite_X), 0
	LD (IX + Sprite_X_Old), 0
	LD (IX + Sprite_Y),     192 - 8 - 16
	LD (IX + Sprite_Y_Old), 192 - 8 - 16
	LD (IX + Sprite_Logic), 0
	LD (IX + Sprite_Logic + 1), 0
	LD (IX + Sprite_Speed_Y), 1
	LD (IX + Sprite_Speed_X), 1
	LD (IX + Sprite_Attribute), 0x47	; Bright white on black

; Initialize the rest
	LD IX, Sprite_Data_Block_Array + Sprite_Data_Block_Size
	LD B, Sprite_Data_Block_Array_Size - 1
Initialise_Sprites_Loop:
	CALL RND16
	LD A, H
	AND 0x7F
	ADD A, 16
	LD (IX + Sprite_Frameno), (Bubble_Frames - Frames_Start) / 2
	LD (IX + Sprite_X), L
	LD (IX + Sprite_X_Old), L
	LD (IX + Sprite_Y), A
	LD (IX + Sprite_Y_Old), A
	LD HL, Demo_Sprite_Logic
	LD (IX + Sprite_Logic), L
	LD (IX + Sprite_Logic + 1), H
	LD (IX + Sprite_Speed_Y), 1
	LD (IX + Sprite_Speed_X), 1
	LD (IX + Sprite_Attribute), 0x45	; Bright cyan on black
	LD DE, Sprite_Data_Block_Size
	ADD IX, DE
	DJNZ Initialise_Sprites_Loop
	RET

; Move the sprite horizontally
; IX : Address of the Sprite's data block
Demo_Sprite_Logic:
	LD A, (IX + Sprite_X)
	CP 240
	JR C, Demo_Sprite_Check_Left_Edge
	; We hit the right edge, bounce to the left
	LD (IX + Sprite_Speed_X), -1
Demo_Sprite_Check_Left_Edge
	OR A
	JP NZ, Demo_Sprite_Move_X
	; We hit the left edge, bounce to the right
	LD (IX + Sprite_Speed_X), 1
Demo_Sprite_Move_X
	ADD A, (IX + Sprite_Speed_X)

; Move the sprite vertically
Demo_Sprite_Logic_1
	LD (IX + Sprite_X), A
	LD A, (IX + Sprite_Y)
	ADD A, (IX + Sprite_Speed_Y)
	CP 176
	JR C, Demo_Sprite_Logic_2
	; We hit the ground, bounce
	LD B, (IX + Sprite_Speed_Y)	; Change Sprite_speed's sign
	LD A, 0
	SBC A, B
	DEC A						; Extra push so we bounce forever
	LD (IX + Sprite_Speed_Y), A
	LD A, 176
Demo_Sprite_Logic_2
	LD (IX + Sprite_Y), A
	LD A, (IX + Sprite_Speed_Y)
	INC A
	LD (IX + Sprite_Speed_Y), A
	RET

Interrupt:
	DI
	PUSH AF
	PUSH BC
	PUSH DE
	PUSH HL
	PUSH IX
	EXX
	EX AF,AF'
	PUSH AF
	PUSH BC
	PUSH DE
	PUSH HL
	PUSH IY
	LD A,2
	OUT (254),A
	LD HL, Player_Frames
	CALL Render_Sprites
	CALL Handle_Sprites
	LD A,7
	OUT (254),A
	POP IY
	POP HL
	POP DE
	POP BC
	POP AF
	EXX
	EX AF,AF'
	POP IX
	POP HL
	POP DE
	POP BC
	POP AF
	EI
	RET

Text_Scores:		DB 0,0,"Demo",0xFE
			DB 9,0,"Score 00000000",0xFE
			DB 24,0,"Lives 0",0xFF

Sprite_Bubble:	DW 	Sprite_Bubble_0, Sprite_Bubble_0,		Sprite_Bubble_2, Sprite_Bubble_2,		Sprite_Bubble_4, Sprite_Bubble_4,		Sprite_Bubble_6, Sprite_Bubble_6

Sprite_Bubble_0:	DB %00000000,%00000000,%00000000
			DB %00000011,%11000000,%00000000
			DB %00001100,%00110000,%00000000
			DB %00010000,%00001000,%00000000
			DB %00100110,%00000100,%00000000
			DB %00101000,%00000100,%00000000
			DB %01001000,%00000010,%00000000
			DB %01000000,%00000010,%00000000
			DB %01000000,%00000010,%00000000
			DB %01000000,%00000010,%00000000
			DB %00000000,%00000100,%00000000
			DB %00100000,%00000100,%00000000
			DB %00010000,%00001000,%00000000
			DB %00001100,%00110000,%00000000
			DB %00000011,%11000000,%00000000
			DB %00000000,%00000000,%00000000

Sprite_Bubble_2:	DB %00000000,%00000000,%00000000
			DB %00000000,%11110000,%00000000
			DB %00000011,%00001100,%00000000
			DB %00000100,%00000010,%00000000
			DB %00001001,%10000001,%00000000
			DB %00001010,%00000001,%00000000
			DB %00010010,%00000000,%10000000
			DB %00010000,%00000000,%10000000
			DB %00010000,%00000000,%10000000
			DB %00010000,%00000000,%10000000
			DB %00001000,%00000001,%00000000
			DB %00001000,%00000001,%00000000
			DB %00000100,%00000010,%00000000
			DB %00000011,%00001100,%00000000
			DB %00000000,%11110000,%00000000
			DB %00000000,%00000000,%00000000

Sprite_Bubble_4:	DB %00000000,%00000000,%00000000
			DB %00000000,%00111100,%00000000
			DB %00000000,%11000011,%00000000
			DB %00000001,%00000000,%10000000
			DB %00000010,%01100000,%01000000
			DB %00000010,%10000000,%01000000
			DB %00000100,%10000000,%00100000
			DB %00000100,%00000000,%00100000
			DB %00000100,%00000000,%00100000
			DB %00000100,%00000000,%00100000
			DB %00000010,%00000000,%01000000
			DB %00000010,%00000000,%01000000
			DB %00000001,%00000000,%10000000
			DB %00000000,%11000011,%00000000
			DB %00000000,%00111100,%00000000
			DB %00000000,%00000000,%00000000

Sprite_Bubble_6:	DB %00000000,%00000000,%00000000
			DB %00000000,%00001111,%00000000
			DB %00000000,%00110000,%11000000
			DB %00000000,%01000000,%00100000
			DB %00000000,%10011000,%00010000
			DB %00000000,%10100000,%00010000
			DB %00000001,%00100000,%00001000
			DB %00000001,%00000000,%00001000
			DB %00000001,%00000000,%00001000
			DB %00000001,%00000000,%00001000
			DB %00000000,%10000000,%00010000
			DB %00000000,%10000000,%00010000
			DB %00000000,%01000000,%00100000
			DB %00000000,%00110000,%11000000
			DB %00000000,%00001111,%00000000
			DB %00000000,%00000000,%00000000

